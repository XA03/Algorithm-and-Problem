#include <bits/stdc++.h>

using namespace std;

int pri(char a){
    if(a=='+'||a=='-')return 1;
    else if(a=='*'||a=='/')return 2;
    else if(a=='^')return 3;
    return 0;
}


string infix_to_postfix(string infix){
    string ret;
    stack<char>s;
    for(int i=0;i<infix.size();i++){
        if(isalpha(infix[i]))ret+=infix[i];
        else{
            if(infix[i]=='(')s.push(infix[i]);                      //??ç¥?????ç®??å¯????????????????????æ¹??äº????????¨perator stack
            else if(infix[i]==')'){                                 //?????????ç¥?????????µå?????????????????????????????????ç¥????????????ç¥???????????????¹æ????????????
                while(s.top()!='('){
                    ret+=s.top();
                    s.pop();
                }
                s.pop();
            }
            else{
                while(!s.empty()&&pri(infix[i])<=pri(s.top())){     //???????stack?????å¾?????????æ¹?????rror?????????æ¼?.top()??å¯??ç¥?????æ¢¯æ­£????­è??????????
                    ret+=s.top();
                    s.pop();
                }                                                   //while?????????¡èª¨??µå???äº?????ï¼¹ï?????????operator??????????????????????????????????ç®?æ³??????????????????????????????????????????ç®???????????????????????????
                s.push(infix[i]);
            }
        }
        
    }

    while(!s.empty()){                                              //??????????????operator????é¢²è??????ç®??????????????????????ç®?????????????????ï¼????????operator?????????????????????????????????????????????????????????
        ret+=s.top();
        s.pop();
    }
    
    return ret;
}

string infix_to_prefix(string infix){
    string ret;
    stack<char>s;
    for(int i=infix.size()-1;i>=0;i--){
        if(isalpha(infix[i]))ret+=infix[i];
        else{
            if(infix[i]==')')s.push(infix[i]);
            else if(infix[i]=='('){
                while(s.top()!=')'){
                    ret+=s.top();
                    s.pop();
                }
                s.pop();
            }
            else{
                while(!s.empty() && pri(infix[i])<pri(s.top())){
                    ret+=s.top();
                    s.pop();
                }
                s.push(infix[i]);
            }
        }
    }

    while(!s.empty()){
        ret+=s.top();
        s.pop();
    }

    reverse(ret.begin(),ret.end());

    return ret;
}



int main(){

    string str;

    cin>>str;

    cout<<infix_to_postfix(str)<<endl;
    cout<<infix_to_prefix(str);
    



    return 0;
}